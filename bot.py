import telebot
from telebot import types
import json
import os
from flask import Flask, request

# –ó–∞–º–µ–Ω–∏ 'YOUR_BOT_TOKEN' –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
TOKEN = '8385623418:AAFiyXpTPpPKqs924hb2ETdubtE9ZWZArdQ'
WEB_APP_URL = 'https://grif399-a11y.github.io/my-mini-app/' 
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
BALANCE_FILE = 'user_balances.json'

def load_balances():
    if not os.path.exists(BALANCE_FILE):
        return {}
    with open(BALANCE_FILE, 'r') as f:
        return json.load(f)

def save_balances(balances):
    with open(BALANCE_FILE, 'w') as f:
        json.dump(balances, f, indent=4)

user_balances = load_balances()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def handle_start(message):
    user_id = str(message.from_user.id)
    if user_id not in user_balances:
        user_balances[user_id] = 0  # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —Ç–µ–ø–µ—Ä—å 0
        save_balances(user_balances)

    keyboard = types.InlineKeyboardMarkup()
    web_app_button = types.WebAppInfo(WEB_APP_URL)
    keyboard.add(types.InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å NFT-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ üíé", web_app=web_app_button))

    bot.send_message(
        message.chat.id,
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ NFT-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ! –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balances[user_id]}",
        reply_markup=keyboard
    )

# --- –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞ –∑–≤–µ–∑–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App ---

@bot.message_handler(content_types=['web_app_data'])
def handle_web_app_data(message):
    data = json.loads(message.web_app_data.data)
    user_id = str(message.from_user.id)

    if data.get('type') == 'sellGift' and 'value' in data:
        sell_value = data['value']
        if user_id in user_balances:
            user_balances[user_id] += sell_value
            save_balances(user_balances)
            bot.send_message(message.chat.id, f"üéÅ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–ª–∏ –ø–æ–¥–∞—Ä–æ–∫! –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user_balances[user_id]} ‚≠ê")
    elif data.get('type') == 'openCase' and 'price' in data:
        case_price = data['price']
        if user_id in user_balances and user_balances[user_id] >= case_price:
            user_balances[user_id] -= case_price
            save_balances(user_balances)
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ –∫–µ–π—Å –æ—Ç–∫—Ä—ã—Ç
            bot.send_message(message.chat.id, f"üéâ –í—ã –æ—Ç–∫—Ä—ã–ª–∏ –∫–µ–π—Å. –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user_balances[user_id]} ‚≠ê")
        else:
            bot.send_message(message.chat.id, "üí∞ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞!")
    elif 'amount' in data:
        amount = int(data['amount'])
        bot.send_invoice(
            chat_id=message.chat.id,
            title=f"–ö—É–ø–∏—Ç—å {amount} –£–∫—É—Å–æ–≤",
            description=f"–ö—É–ø–∏—Ç—å {amount} –£–∫—É—Å–æ–≤ –∑–∞ {amount/100} ‚≠ê",
            payload=user_id,
            provider_token='381764672:TEST:7000',
            currency='XTR', 
            prices=[types.LabeledPrice(label=f"–£–∫—É—Å—ã ({amount})", amount=int(amount))]
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
@bot.pre_checkout_query_handler(func=lambda query: True)
def handle_pre_checkout_query(pre_checkout_query):
    bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
    
@bot.message_handler(content_types=['successful_payment'])
def handle_successful_payment(message):
    user_id = str(message.from_user.id)
    amount_in_stars = message.successful_payment.total_amount
    
    if user_id in user_balances:
        user_balances[user_id] += amount_in_stars
    else:
        user_balances[user_id] = amount_in_stars
    
    save_balances(user_balances)
    
    bot.send_message(
        message.chat.id,
        f"üéâ –ü–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ! –í–∞—à –±–∞–ª–∞–Ω—Å: {user_balances[user_id]} ‚≠ê"
    )

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –≤–µ–±—Ö—É–∫–∞ ---

@app.route('/', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return '', 200
    else:
        return '', 403

if __name__ == '__main__':
    bot.polling(none_stop=True)